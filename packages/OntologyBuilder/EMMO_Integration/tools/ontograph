#!/usr/bin/env python3
"""Tool for plotting ontologies."""
import sys
import os
import argparse

import pydot

# Support to run from uninstalled version by adding parent dir to sys path
rootdir = os.path.abspath(os.path.realpath((os.path.dirname(
    os.path.dirname(__file__)))))
sys.path.insert(1, rootdir)

from emmo import get_ontology
from emmo.ontograph import OntoGraph


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        'iri', metavar='IRI',  # default='emmo-inferred.owl', nargs='?',
        help='OWL file/source to plot.')
    parser.add_argument(
        'output',
        help='name of output file.')
    parser.add_argument(
        '--root', '-r',
        help='Name of root node in the graph.')
    parser.add_argument(
        '--reasoner', '-n', action='store_true',
        help='Run the reasoner on the ontology before plotting.')
    parser.add_argument(
        '--format', '-f',
        help='Format of output file.  By default it is inferred from '
        'the output file extension.')
    parser.add_argument(
        '--rankdir', '-R', default='BT', choices=['BT', 'TB', 'RL', 'LR'],
        help='Graph direction (from leaves to root).  Possible values are: '
        '"BT" (bottom-top, default), "TB" (top-bottom), "RL" (right-left) and '
        '"LR" (left-right).')
    parser.add_argument(
        '--relations', action='store_true',
        help='Create a graph with only relations.')
    parser.add_argument(
        '--style', '-s', default='default',
        help='Select plot stype. May be "default" or "uml".')
    parser.add_argument(
        '--leafs', '-l', action='append', default=[],
        help='Leafs nodes for plotting sub-graphs.  May be provided as '
        'comma-separated string and/or with multiple --leafs options.')
    args = parser.parse_args()

    onto = get_ontology(args.iri)
    onto.load()

    if args.reasoner:
        onto.sync_reasoner()

    # rankdir = 'RL' if args.horizontal else 'BT'
    format = args.format if args.format else os.path.splitext(
        args.output)[1][1:]

    style = getattr(OntoGraph, '_%s_style' % args.style)
    style['graph']['rankdir'] = args.rankdir

    leafs = set()
    for leaf in args.leafs:
        if ',' in leaf:
            leafs.update(leaf.split(','))
        else:
            leafs.add(leaf)

    if args.relations:
        graph = onto.get_dot_relations_graph(style=style, leafs=leafs)
    else:
        graph = onto.get_dot_graph(args.root, style=style, leafs=leafs)

    try:
        graph.write(path=args.output, format=format)
    except pydot.InvocationException as e:
        sys.stderr.write(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()
